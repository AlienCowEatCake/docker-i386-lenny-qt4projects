From 0871c762effcc1c25d5563cd8148cf8431d7cdd3 Mon Sep 17 00:00:00 2001
From: Peter Zhigalov <peter.zhigalov@gmail.com>
Date: Sat, 26 Dec 2020 23:14:08 +0700
Subject: [PATCH 1/2] Use old-style apt.conf config comments

E: Syntax error /etc/apt/apt.conf.d/docker-autoremove-suggests:16: Extra junk after value
---
 contrib/mkimage/debootstrap | 70 ++++++++++++++++++-------------------
 1 file changed, 35 insertions(+), 35 deletions(-)

diff --git a/contrib/mkimage/debootstrap b/contrib/mkimage/debootstrap
index 7046b6e..1137769 100755
--- a/contrib/mkimage/debootstrap
+++ b/contrib/mkimage/debootstrap
@@ -111,47 +111,47 @@ if [ -d "$rootfsDir/etc/apt/apt.conf.d" ]; then
 	aptGetClean='"rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true";'
 	echo >&2 "+ cat > '$rootfsDir/etc/apt/apt.conf.d/docker-clean'"
 	cat > "$rootfsDir/etc/apt/apt.conf.d/docker-clean" <<- EOF
-		# Since for most Docker users, package installs happen in "docker build" steps,
-		# they essentially become individual layers due to the way Docker handles
-		# layering, especially using CoW filesystems.  What this means for us is that
-		# the caches that APT keeps end up just wasting space in those layers, making
-		# our layers unnecessarily large (especially since we'll normally never use
-		# these caches again and will instead just "docker build" again and make a brand
-		# new image).
-
-		# Ideally, these would just be invoking "apt-get clean", but in our testing,
-		# that ended up being cyclic and we got stuck on APT's lock, so we get this fun
-		# creation that's essentially just "apt-get clean".
+		// Since for most Docker users, package installs happen in "docker build" steps,
+		// they essentially become individual layers due to the way Docker handles
+		// layering, especially using CoW filesystems.  What this means for us is that
+		// the caches that APT keeps end up just wasting space in those layers, making
+		// our layers unnecessarily large (especially since we'll normally never use
+		// these caches again and will instead just "docker build" again and make a brand
+		// new image).
+
+		// Ideally, these would just be invoking "apt-get clean", but in our testing,
+		// that ended up being cyclic and we got stuck on APT's lock, so we get this fun
+		// creation that's essentially just "apt-get clean".
 		DPkg::Post-Invoke { ${aptGetClean} };
 		APT::Update::Post-Invoke { ${aptGetClean} };
 
 		Dir::Cache::pkgcache "";
 		Dir::Cache::srcpkgcache "";
 
-		# Note that we do realize this isn't the ideal way to do this, and are always
-		# open to better suggestions (https://github.com/docker/docker/issues).
+		// Note that we do realize this isn't the ideal way to do this, and are always
+		// open to better suggestions (https://github.com/docker/docker/issues).
 	EOF
 
 	# remove apt-cache translations for fast "apt-get update"
 	echo >&2 "+ echo Acquire::Languages 'none' > '$rootfsDir/etc/apt/apt.conf.d/docker-no-languages'"
 	cat > "$rootfsDir/etc/apt/apt.conf.d/docker-no-languages" <<- 'EOF'
-		# In Docker, we don't often need the "Translations" files, so we're just wasting
-		# time and space by downloading them, and this inhibits that.  For users that do
-		# need them, it's a simple matter to delete this file and "apt-get update". :)
+		// In Docker, we don't often need the "Translations" files, so we're just wasting
+		// time and space by downloading them, and this inhibits that.  For users that do
+		// need them, it's a simple matter to delete this file and "apt-get update". :)
 
 		Acquire::Languages "none";
 	EOF
 
 	echo >&2 "+ echo Acquire::GzipIndexes 'true' > '$rootfsDir/etc/apt/apt.conf.d/docker-gzip-indexes'"
 	cat > "$rootfsDir/etc/apt/apt.conf.d/docker-gzip-indexes" <<- 'EOF'
-		# Since Docker users using "RUN apt-get update && apt-get install -y ..." in
-		# their Dockerfiles don't go delete the lists files afterwards, we want them to
-		# be as small as possible on-disk, so we explicitly request "gz" versions and
-		# tell Apt to keep them gzipped on-disk.
+		// Since Docker users using "RUN apt-get update && apt-get install -y ..." in
+		// their Dockerfiles don't go delete the lists files afterwards, we want them to
+		// be as small as possible on-disk, so we explicitly request "gz" versions and
+		// tell Apt to keep them gzipped on-disk.
 
-		# For comparison, an "apt-get update" layer without this on a pristine
-		# "debian:wheezy" base image was "29.88 MB", where with this it was only
-		# "8.273 MB".
+		// For comparison, an "apt-get update" layer without this on a pristine
+		// "debian:wheezy" base image was "29.88 MB", where with this it was only
+		// "8.273 MB".
 
 		Acquire::GzipIndexes "true";
 		Acquire::CompressionTypes::Order:: "gz";
@@ -160,21 +160,21 @@ if [ -d "$rootfsDir/etc/apt/apt.conf.d" ]; then
 	# update "autoremove" configuration to be aggressive about removing suggests deps that weren't manually installed
 	echo >&2 "+ echo Apt::AutoRemove::SuggestsImportant 'false' > '$rootfsDir/etc/apt/apt.conf.d/docker-autoremove-suggests'"
 	cat > "$rootfsDir/etc/apt/apt.conf.d/docker-autoremove-suggests" <<- 'EOF'
-		# Since Docker users are looking for the smallest possible final images, the
-		# following emerges as a very common pattern:
+		// Since Docker users are looking for the smallest possible final images, the
+		// following emerges as a very common pattern:
 
-		#   RUN apt-get update \
-		#       && apt-get install -y <packages> \
-		#       && <do some compilation work> \
-		#       && apt-get purge -y --auto-remove <packages>
+		//   RUN apt-get update \
+		//       && apt-get install -y <packages> \
+		//       && <do some compilation work> \
+		//       && apt-get purge -y --auto-remove <packages>
 
-		# By default, APT will actually _keep_ packages installed via Recommends or
-		# Depends if another package Suggests them, even and including if the package
-		# that originally caused them to be installed is removed.  Setting this to
-		# "false" ensures that APT is appropriately aggressive about removing the
-		# packages it added.
+		// By default, APT will actually _keep_ packages installed via Recommends or
+		// Depends if another package Suggests them, even and including if the package
+		// that originally caused them to be installed is removed.  Setting this to
+		// "false" ensures that APT is appropriately aggressive about removing the
+		// packages it added.
 
-		# https://aptitude.alioth.debian.org/doc/en/ch02s05s05.html#configApt-AutoRemove-SuggestsImportant
+		// https://aptitude.alioth.debian.org/doc/en/ch02s05s05.html#configApt-AutoRemove-SuggestsImportant
 		Apt::AutoRemove::SuggestsImportant "false";
 	EOF
 fi
-- 
2.20.1

